import net.neoforged.neodev.NeoDevPlugin

plugins {
    id 'java'
//    id 'net.neoforged.gradle.platform'
    id 'com.diffplug.spotless'
    id 'net.neoforged.licenser'
    id 'neoforge.formatting-conventions'
}

plugins.getPlugin(NeoDevPlugin).configureExtra(project, true)

evaluationDependsOn(":neoforge")

def neoforgeProject = project(':neoforge')
def testframeworkProject = project(':testframework')

repositories {
    mavenLocal()
    maven {
        name 'Mojang'
        url 'https://libraries.minecraft.net'
    }
    maven {
        name 'NeoForged'
        url 'https://maven.neoforged.net/releases'
    }
}

sourceSets {
    main {
        resources {
            srcDir file('src/generated/resources')
        }
    }
    junit {
    }
}

dependencies {
    implementation project(path: ':neoforge', configuration: 'runtimeElements')
    implementation(testframeworkProject)

    junitImplementation(platform("org.junit:junit-bom:${project.jupiter_api_version}"))
    junitImplementation "org.junit.jupiter:junit-jupiter-params"
    junitRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"

    junitImplementation("org.assertj:assertj-core:${project.assertj_core}")
    junitImplementation "net.neoforged.fancymodloader:junit-fml:${project.fancy_mod_loader_version}"
    junitImplementation project(path: ':neoforge', configuration: 'runtimeElements')
    junitImplementation(testframeworkProject)

    compileOnly "org.jetbrains:annotations:${project.jetbrains_annotations_version}"
}
// Required to fix compile classpath using an older junit version. Alternatively we could also just bump junit.
configurations.junitCompileClasspath.shouldResolveConsistentlyWith configurations.junitRuntimeClasspath

junitTest {
    useJUnitPlatform()
    classpath = sourceSets.junit.output + sourceSets.junit.runtimeClasspath
    testClassesDirs = sourceSets.junit.output.classesDirs
    outputs.upToDateWhen { false }
}

neoForge {
    mods {
        neotests {
            sourceSet sourceSets.main
        }
        testframework {
            sourceSet project(":testframework").sourceSets.main
        }
        junit {
            sourceSet sourceSets.junit
        }
    }

    unitTest {
        // No need for enable(), the NeoDevPlugin already does it.
        loadedMods = [ project(":neoforge").neoForge.mods.minecraft, mods.testframework, mods.junit ]
    }

    runs {
        client {
            client()
        }
//        junit {
//            configure neoforgeProject.runTypes.junit
//            unitTestSource sourceSets.junit
//        }
        server {
            server()
        }
        gameTestServer {
            type = "gameTestServer"
        }
//        gameTestClient {
//            configure neoforgeProject.runTypes.gameTestClient
//        }
        data {
            data()

            // TODO: should we copy the config from the neoforge project? (existing resources and stuff)

            programArguments.addAll '--flat', '--all', '--validate',
                    '--mod', 'data_gen_test',
                    '--mod', 'global_loot_test',
                    '--mod', 'scaffolding_test',
                    '--mod', 'custom_tag_types_test',
                    '--mod', 'new_model_loader_test',
                    '--mod', 'remove_tag_datagen_test',
                    '--mod', 'tag_based_tool_types',
                    '--mod', 'custom_transformtype_test',
                    '--mod', 'data_pack_registries_test',
                    '--mod', 'biome_modifiers_test',
                    '--mod', 'structure_modifiers_test',
                    '--mod', 'custom_preset_editor_test',
                    '--mod', 'custom_predicate_test',
                    '--mod', 'neotests',
                    '--existing-mod', 'testframework',
                    '--existing', sourceSets.main.resources.srcDirs[0].absolutePath
        }
    }

    runs.configureEach {
        // Add NeoForge and Minecraft (both under the "minecraft" mod), and exclude junit.
        mods = [ neoforgeProject.neoForge.mods.minecraft, neoForge.mods.neotests, neoForge.mods.testframework ]

        gameDirectory.set project.file("runs/${it.name}") as File
    }
//    runs.junit.modSources.all().get().values().remove(sourceSets.main)
}

//afterEvaluate {
//    runs.data {
//        // Override --output that forge already has
//        def args = new ArrayList<String>(programArguments.get());
//        def outputIndex = args.indexOf('--output');
//        args.set(outputIndex+1, file('src/generated/resources/').absolutePath);
//        programArguments.set(args);
//    }
//}

license {
    header = rootProject.file('codeformat/HEADER.txt')
    skipExistingHeaders = true
    include '**/*.java'
}
